@using System.Timers
@using CTFPlatform.Models.Settings
@using CTFPlatform.Utilities
@rendermode InteractiveServer
@attribute [StreamRendering]

@implements IDisposable

@inject IDbContextFactory<BlazorCtfPlatformContext> DbFactory
@inject IInstanceManager InstanceManager
@inject ICooldownManager CooldownManager
@inject IJSRuntime JsRuntime
@inject TimeProvider TimeProvider
@inject ILogger<ChallengeDialog> Logger

<div class="modal show fade" id="challenge-modal" tabindex="-1" role="dialog" style="display: block;">
    @if (Challenge == null || User == null)
    {
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="close btn-close" data-dismiss="modal" aria-label="Close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <p>An unknown error occurred.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div style="display: inline-block;">
                        <h5 class="modal-title">@Challenge.Title</h5>
                        <span class="modal-subtitle">@Challenge.Category - @Challenge.Flags.Sum(t => t.Points) Points</span>
                    </div>
                    <button type="button" class="close btn-close" data-dismiss="modal" aria-label="Close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    @if (Challenge.Flags.Count > 1)
                    {
                        <div class="challenge-flags alert alert-info" role="alert">
                            You have found <b>@Challenge.Flags.Count(f => FlagsCompleted?.Contains(f.Id) == true)/@Challenge.Flags.Count</b> flags for this challenge and earned <b>@Challenge.Flags.Where(f => FlagsCompleted?.Contains(f.Id) == true).Sum(f => f.Points)/@Challenge.Flags.Sum(t => t.Points)</b> points.
                        </div>
                    }
                    else if (Challenge.Flags.All(f => FlagsCompleted?.Contains(f.Id) == true))
                    {
                        <div class="challenge-flags alert alert-success" role="alert">
                            You have solved this challenge and earned <b>@Challenge.Flags.Sum(t => t.Points)</b> points.
                        </div>
                    }
                    else
                    {
                        <div class="challenge-flags alert alert-secondary" role="alert">
                            You have not solved this challenge yet.
                        </div>
                    }
                    <p class="challenge-description">
                        <pre>@((MarkupString)Challenge.Description)</pre>
                    </p>
                    @if (Challenge.Files.Any())
                    {
                        <div class="challenge-files">
                            @GetFileLinks()
                        </div>
                    }
                    @if (Challenge is InstanceChallenge && !_checkingInstance)
                    {
                        <div class="mt-2">
                            @if (_instanceCooldown != null && _instanceCooldown >= DateTime.UtcNow)
                            {
                                <div class="alert alert-warning mb-0">
                                    You have been creating too many instances and cannot create any more until: @TimeProvider.ToLocalDateTime(_instanceCooldown.Value.TrySpecifyKind(DateTimeKind.Utc)).ToString("dd/MM/yyyy h:mm:ss tt")
                                </div>
                            }
                            else
                            {
                                @if (_instanceError)
                                {
                                    <div class="challenge-flags alert alert-danger" role="alert">
                                        @if (_challengeInstance != null)
                                        {
                                            @:An error occurred while attempting to destroy the instance.
                                        }
                                        else
                                        {
                                            @:An error occurred while attempting to start the instance.
                                        }
                                    </div>
                                }
                                @if (_challengeInstance != null)
                                {
                                    <span>Instance expires at @TimeProvider.ToLocalDateTime(_challengeInstance.InstanceExpiry.TrySpecifyKind(DateTimeKind.Utc)).ToString("dd/MM/yyyy h:mm:ss tt")</span>
                                }
                                <div class="challenge-instance d-flex align-content-center mt-1">
                                    @if (_challengeInstance == null || _instancePending)
                                    {
                                        <input name="instance-details" type="text" value="@GetInstanceText()" readonly class="form-control"/>
                                    }
                                    else
                                    {

                                        <div class="input-group">
                                            <input name="instance-details" type="text" value="@GetInstanceText()" @ref="_hostRef" readonly class="form-control"/>
                                            <div class="input-group-append">
                                                <button class="btn btn-info" type="button" @onclick="CopyHost">Copy</button>
                                            </div>
                                        </div>
                                    }
                                    @if (_challengeInstance == null)
                                    {
                                        <button type="button" id="start-instance" class="btn btn-primary ms-2" style="white-space: nowrap;" disabled="@_instancePending" @onclick="StartInstance">Start Instance</button>
                                    }
                                    else
                                    {
                                        <button type="button" id="kill-instance" class="btn btn-danger ms-2" style="white-space: nowrap;" disabled="@_instancePending" @onclick="KillInstance">Kill Instance</button>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <div class="d-flex flex-column flex-grow-1">
                        @if (!string.IsNullOrWhiteSpace(_alertContent))
                        {
                            <div class="alert @_alertType alert-dismissible fade show" role="alert">
                                @_alertContent
                                <button type="button" class="close btn-close" data-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
                            </div>
                        }
                        <div class="d-flex align-content-center my-2">
                            <input id="flag" @bind-value="_flagInput" @bind-value:event="oninput" disabled="@_submitting" class="form-control" @onkeydown="FlagSubmitted" />
                            <button type="button" id="flag-submission" class="btn btn-primary ms-2" style="white-space: nowrap;" disabled="@_submitting" @onclick="SubmitFlag">Submit Flag</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Challenge? Challenge { get; set; }
    
    [Parameter]
    public int[]? FlagsCompleted { get; set; }
    
    [Parameter]
    public CtfUser? User { get; set; }
    
    [Parameter] 
    public EventCallback<int> FlagCompleted { get; set; }
    
    [Parameter] 
    public EventCallback DialogClosed { get; set; }

    private bool _checkingInstance = true;
    private bool _instancePending;
    private bool _instanceError;
    private DateTime? _instanceCooldown;
    private ChallengeInstance? _challengeInstance;

    private string _flagInput = "";
    private bool _submitting;

    private string _alertContent = "";
    private string _alertType = "";

    private Timer? _timer;

    private ElementReference? _hostRef;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("registerClickTrigger", DotNetObjectReference.Create(this), "CloseDialog", "challenge-modal");
            if (Challenge is InstanceChallenge instanceChallenge && User != null)
            {
                _challengeInstance = await InstanceManager.CheckChallengeInstance(instanceChallenge, User);
                _checkingInstance = false;
                if (_challengeInstance is { Host: "" or null })
                {
                    _challengeInstance = null;
                    _instancePending = true;
                    _timer = new Timer()
                    {
                        AutoReset = false,
                        Interval = 5 * 1000,
                    };
                    _timer.Elapsed += CheckInstance;
                    _timer.Start();

                }
                
                StateHasChanged();
            }
        }
    }

    private async void CheckInstance(object? obj, ElapsedEventArgs args)
    {
        try
        {
            _challengeInstance = await InstanceManager.CheckChallengeInstance((Challenge as InstanceChallenge)!, User!);
            if (_challengeInstance is { Host: "" or null })
            {
                _challengeInstance = null;
                _timer!.Start();
            }
            else
            {
                _instancePending = false;
                await InvokeAsync(StateHasChanged);
            }
            
        }
        catch
        {
            _challengeInstance = null;
            _timer!.Start();
        }
    }

    [JSInvokable]
    public void CloseDialog()
    {
        DialogClosed.InvokeAsync();
    }

    private async Task SubmitFlag()
    {
        _submitting = true;
        StateHasChanged();

        try
        {
            if (Challenge == null || User == null)
            {
                _alertContent = "An unknown error occurred.";
                _alertType = "alert-danger";
                return;
            }

            if (string.IsNullOrWhiteSpace(_flagInput))
            {
                _alertContent = "Please enter a flag to check.";
                _alertType = "alert-danger";
                return;
            }

            var flag = Challenge.Flags.FirstOrDefault(f => f.Flag == _flagInput);
            if (flag != null)
            {
                if (FlagsCompleted?.Contains(flag.Id) == true)
                {
                    _alertContent = "You have solved this flag, again!";
                    _alertType = "alert-success";
                    _flagInput = "";
                    return;
                }

                await using var context = await DbFactory.CreateDbContextAsync();
                
                var challenge = context.Challenges.Include(challenge => challenge.Flags).FirstOrDefault(t => t.Id == Challenge.Id);
                if (challenge == null || challenge.Hidden)
                {
                    Challenge = null;
                    return;
                }

                flag = challenge.Flags.FirstOrDefault(t => t.Id == flag.Id);
                if (flag == null)
                {
                    Challenge = null;
                    return;
                }

                var user = new CtfUser()
                {
                    Id = User.Id
                };
                context.Attach(user).State = EntityState.Unchanged;
                flag.Submissions.Add(new FlagSubmission
                {
                    User = user,
                    DateSubmitted = DateTime.UtcNow
                });
                await context.SaveChangesAsync();
                await FlagCompleted.InvokeAsync(flag.Id);
                Logger.LogInformation("Successful flag submission - User: ({UserId}, {UserAuthId}, {UserDisplayName}), Flag: ({FlagId}, {FlagName}), Challenge: ({ChallengeId}, {ChallengeName}).", 
                    user.Id, user.AuthId, user.DisplayName ?? user.Email, flag.Id, flag.Name, flag.Challenge.Id, flag.Challenge.Title);

                _alertContent = $"You have solved this flag and earned {flag.Points} points!";
                _alertType = "alert-success";
                _flagInput = "";
            }
            else
            {
                _alertContent = "This flag is incorrect, please try again.";
                _alertType = "alert-danger";
            }
        }
        finally
        {
            _submitting = false;
            StateHasChanged();
        }
    }

    private void CloseAlert()
    {
        _alertContent = "";
        StateHasChanged();
    }

    private async Task FlagSubmitted(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
            await SubmitFlag();
    }

    private MarkupString GetFileLinks()
    {
        return (MarkupString)string.Join(", ", Challenge?.Files.Select(f => $"<span class=\"challenge-file\"><a href=\"files/{f.Id}\" download=\"{f.Name}\" target=\"_top\">{f.Name}</a></span>") ?? []);
    }

    private async Task StartInstance()
    {
        _instancePending = true;
        StateHasChanged();

        var cooldownTime = await CooldownManager.GetUserCooldown(User);
        _instanceCooldown = cooldownTime;
        if (_instanceCooldown != null)
        {
            _instancePending = false;
            StateHasChanged();
            return;
        }
        
        Logger.LogInformation("Instance start request - User: ({UserId}, {UserAuthId}, {UserDisplayName}), Challenge: ({ChallengeId}, {ChallengeName}).", 
            User!.Id, User.AuthId, User.DisplayName ?? User.Email, Challenge!.Id, Challenge.Title);
        _challengeInstance = await InstanceManager.GetOrDeployChallengeInstance((Challenge as InstanceChallenge)!, User!);
        if (_challengeInstance == null)
            _instanceError = true;
        else
            _instancePending = false;
        
        StateHasChanged();
    }

    private async Task KillInstance()
    {
        _instancePending = true;
        StateHasChanged();

        Logger.LogInformation("Instance kill request - User: ({UserId}, {UserAuthId}, {UserDisplayName}), Instance: ({InstanceId}, {InstanceLoggingInfo}), Challenge: ({ChallengeId}, {ChallengeName}).", 
            User!.Id, User.AuthId, User.DisplayName ?? User.Email, _challengeInstance!.Id, _challengeInstance.LoggingInfo, Challenge!.Id, Challenge.Title);
        if (!await InstanceManager.KillUserInstance(_challengeInstance!, User!))
        {
            _instanceError = true;
        }
        else
        {
            _challengeInstance = null;
            _instancePending = false;
        }
        
        StateHasChanged();
    }

    private string GetInstanceText()
    {
        if(_challengeInstance != null) 
            return _instancePending ? "Killing instance, please wait." : _challengeInstance.Host;
        return _instancePending ? "Starting instance, please wait." : "Start instance to show connection details.";
    }

    public void Dispose() => _timer?.Dispose();

    private async Task CopyHost()
    {
        if (_challengeInstance == null || _hostRef == null)
            return;
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _challengeInstance.Host);
        await JsRuntime.InvokeVoidAsync("selectText", _hostRef);
    }

}