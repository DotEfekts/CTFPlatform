@using CTFPlatform.Utilities

@page "/admin/users/{Id:int}/details"
@rendermode InteractiveServer

@attribute [Authorize(Roles = CtfUser.AdminRole)]
@attribute [StreamRendering]

@inject IDbContextFactory<BlazorCtfPlatformContext> DbFactory
@inject NavigationManager NavigationManager
@inject TimeProvider TimeProvider

<PageTitle>User Details</PageTitle>

<div>
    <h2>User Details</h2>
    <hr />
    @if (_user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Auth Id</dt>
            <dd class="col-sm-10">@_user.AuthId</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@_user.Email</dd>
            <dt class="col-sm-2">Display Name</dt>
            <dd class="col-sm-10">@(_user.DisplayName ?? "Not Set")</dd>
            <dt class="col-sm-2">User Locked</dt>
            <dd class="col-sm-10">@(_user.Locked ? "Yes" : "No")</dd>
            <dt class="col-sm-2">Score</dt>
            <dd class="col-sm-10">@_user.Submissions.Count Flags - @_user.Submissions.Sum(t => t.Flag.Points) Points</dd>
        </dl>
        <div>
            <a href="@($"/admin/users/{_user.Id}/edit")">Edit</a> |
            <a href="@($"/admin/users")">Back to List</a>
        </div>
        <div class="d-flex justify-content-center">
            <div class="col-md-7">
                <h3 class="mt-4">Completed Flags</h3>
                <QuickGrid Class="table" Items="_user.Submissions.AsQueryable()">
                    <PropertyColumn Property="@(flag => flag.Flag.Challenge.Title + (flag.Flag.Challenge.Flags.Count > 1 ? " - " + flag.Flag.Name : "" ))" Title="Flag" />
                    <PropertyColumn Property="flag => TimeProvider.ToLocalDateTime(flag.DateSubmitted.TrySpecifyKind(DateTimeKind.Utc))" Format="dd/MM/yyyy" Title="Date Solved" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
                    <PropertyColumn Property="flag => flag.Flag.Points" Title="Points Earned" />
                </QuickGrid>
            </div>
        </div>
    }
</div>

@code {
    private CtfUser? _user;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _user = await context.Users
                .Include(u => u.Submissions).ThenInclude(s => s.Flag)
                .FirstOrDefaultAsync(m => m.Id == Id);

            if (_user is null)
                NavigationManager.NavigateTo("notfound");
            
            StateHasChanged();
        }
    }

}
