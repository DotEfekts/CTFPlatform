@page "/admin/users/{Id:int}/delete"
@rendermode InteractiveServer

@attribute [Authorize(Roles = CtfUser.AdminRole)]
@attribute [StreamRendering]

@inject IDbContextFactory<BlazorCtfPlatformContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete User</PageTitle>

<div>
    <h2>Delete User</h2>
    <hr />
    <p>Are you sure you want to delete this user?</p>
    @if (_user is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Auth Id</dt>
            <dd class="col-sm-10">@_user.AuthId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@_user.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Display Name</dt>
            <dd class="col-sm-10">@(_user.DisplayName ?? "Not Set")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">User Locked</dt>
            <dd class="col-sm-10">@(_user.Locked ? "Yes" : "No")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Score</dt>
            <dd class="col-sm-10">@_user.Submissions.Count Flags - @_user.Submissions.Sum(t => t.Flag.Points) Points</dd>
        </dl>
        <EditForm method="post" Model="_user" OnValidSubmit="DeleteCtfUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(_user is null)">Delete</button> |
            <a href="/admin/users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private CtfUser? _user;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _user = await context.Users
                .Include(u => u.Submissions).ThenInclude(s => s.Flag)
                .FirstOrDefaultAsync(u => u.Id == Id);

            if (_user is null)
                NavigationManager.NavigateTo("notfound");
            
            StateHasChanged();
        }
    }

    private async Task DeleteCtfUser()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        context.Users.Remove(_user!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("admin/users");
    }
}
