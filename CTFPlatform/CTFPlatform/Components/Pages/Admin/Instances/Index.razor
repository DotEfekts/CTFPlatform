@page "/admin/instances"
@rendermode InteractiveServer

@attribute [Authorize(Roles = CtfUser.AdminRole)]
@attribute [StreamRendering]

@using CTFPlatform.Utilities
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorCtfPlatformContext> DbFactory
@inject TimeProvider TimeProvider
@inject IInstanceManager InstanceManager

<PageTitle>Instances</PageTitle>

<h2>Instances</h2>

@if (_context == null)
{
    <span><i>Loading...</i></span>
}
else
{
    <div>
        <QuickGrid Class="table" @ref="_table" Items="_context.ChallengeInstances.ToList().GroupBy(t => t.DeploymentPath).AsQueryable()">
            <PropertyColumn Property="instances => instances.First().Challenge.Title" Title="Challenge" />
            <PropertyColumn Property="@(instances => string.Join(", ", instances.Select(t => t.User.DisplayName ?? t.User.Email)))" Title="Users" />
            <PropertyColumn Property="@(instances => TimeProvider.ToLocalDateTime(instances.Max(t => t.InstanceExpiry).TrySpecifyKind(DateTimeKind.Utc)).ToString("dd/MM/yyyy h:mm:ss tt"))" Title="Instance Expiry" />
            <PropertyColumn Property="instances => instances.First().Host" Title="Host" />
            <TemplateColumn Context="instances">
                <button type="button" id="kill-instance" class="btn btn-primary ms-2" style="white-space: nowrap;" @onclick="() => KillInstance(instances)">Kill Instance</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@code {
    private BlazorCtfPlatformContext? _context;
    private QuickGrid<IGrouping<string, ChallengeInstance>> _table;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _context = await DbFactory.CreateDbContextAsync();
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync() => await (_context?.DisposeAsync() ?? ValueTask.CompletedTask);

    private async Task KillInstance(IGrouping<string, ChallengeInstance> instances)
    {
        foreach(var instance in instances)
            await InstanceManager.KillChallengeInstance(instance);
        await _table.RefreshDataAsync();
    }

    private IQueryable<TGridItem>? GetQueryable<TGridItem>()
    {
        throw new NotImplementedException();
    }
}
