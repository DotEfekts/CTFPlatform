@page "/admin/settings"
@using System.Security.Claims
@using CTFPlatform.Models.Settings
@using CTFPlatform.Utilities
@rendermode InteractiveServer

@attribute [Authorize(Roles = CtfUser.AdminRole)]
@attribute [StreamRendering]

@inject IVpnCertificateManager VpnCertificateManager
@inject IStoredSettingsManager<ApplicationSettings> SettingsManager
@inject IDbContextFactory<BlazorCtfPlatformContext> DbContextFactory
@inject ILogger<EditSettings> Logger

<PageTitle>Edit Settings</PageTitle>

<h2>Edit Settings</h2>

@if (Settings is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="card col-md-5">
            <div class="card-body">
                <EditForm method="post" Model="Settings" OnValidSubmit="UpdateSettings" FormName="edit" Enhance>
                    <ObjectGraphDataAnnotationsValidator/>
                    <ValidationSummary Model="Settings" role="alert"/>
                    <div class="mb-1">
                        <label for="hidden" class="form-label">Freeze CTF</label>
                        <InputCheckbox id="hidden" @bind-Value="Settings.FreezeCtf" class="form-check-input ms-2" disabled="@_submitting" />
                    </div>
                    <div class="mb-3">
                        <label for="title" class="form-label">Activation Code</label>
                        <InputText id="title" @bind-Value="Settings.ActivationCode" class="form-control" disabled="@_submitting" />
                        <ValidationMessage For="() => Settings.ActivationCode" class="text-danger" />
                    </div>
                    <div class="mb-1">
                        <label for="hidden" class="form-label">Enable Instance Creation Cooldown</label>
                        <InputCheckbox id="hidden" @bind-Value="Settings.EnableSpawningCooldown" class="form-check-input ms-2" disabled="@_submitting" />
                    </div>
                    @if (Settings.EnableSpawningCooldown)
                    {
                        <div class="mb-3">
                            <label for="title" class="form-label">Cooldown Timespan (Minutes)</label>
                            <InputNumber id="title" @bind-Value="Settings.CooldownTimespan" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => Settings.CooldownTimespan" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="title" class="form-label">Cooldown Max Instances</label>
                            <InputNumber id="title" @bind-Value="Settings.CooldownLimit" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => Settings.CooldownLimit" class="text-danger" />
                        </div>
                    }
                    <div class="mb-1">
                        <label for="hidden" class="form-label">Enable VPN</label>
                        <InputCheckbox id="hidden" @bind-Value="Settings.EnableVpnManager" class="form-check-input ms-2" disabled="@_submitting" />
                    </div>
                    @if (_storedSettings?.EnableVpnManager == true)
                    {
                        <div class="d-flex justify-content-center mb-2">
                            <a href="certificates/ca.crt" class="btn btn-primary me-2" disabled="@_regenerating" download="ca.crt">CA Certificate</a>
                            <a href="certificates/server.pem" class="btn btn-primary" disabled="@_regenerating" download="server.pem">Server Certificate</a>
                        </div>
                        <div class="d-flex justify-content-center">
                            <button type="button" class="btn btn-primary me-2" disabled="@_regenerating" @onclick="RegenerateCaCert">Regenerate CA</button>
                            <button type="button" class="btn btn-primary me-2" disabled="@_regenerating" @onclick="RegenerateServerCert">Regenerate Server</button>
                        </div>
                        <div class="mb-3">
                            <label for="title" class="form-label">OpenVPN Template</label>
                            <InputTextArea id="title" @bind-Value="Settings.OpenVpnTemplate" rows="10" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => Settings.OpenVpnTemplate" class="text-danger" />
                        </div>
                    }
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary" disabled="@_submitting">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (_showConfirmation)
{
    <ConfirmationDialog Title="@(_regenCa ? "Regenerate CA Certificate" : "Regenerate Server Certificate")"
                        BodyText="@(_regenCa ? "Are you sure you wish to regenerate the CA certificate?" :
                                      "Are you sure you wish to regenerate the Server certificate?")"
                        ConfirmText="Regenerate" 
                        DialogClosed="ConfirmationAction" />
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    [SupplyParameterFromForm]
    private ApplicationSettings? Settings { get; set; }

    private ApplicationSettings? _storedSettings;
    private bool _submitting;
    
    private bool _regenerating;
    private bool _showConfirmation;
    private bool _regenCa;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _storedSettings = await SettingsManager.GetSettingsAsync();
            Settings = new ApplicationSettings()
            {
                FreezeCtf = _storedSettings.FreezeCtf,
                ActivationCode = _storedSettings.ActivationCode,
                EnableSpawningCooldown = _storedSettings.EnableSpawningCooldown,
                CooldownTimespan = _storedSettings.CooldownTimespan,
                CooldownLimit = _storedSettings.CooldownLimit,
                EnableVpnManager = _storedSettings.EnableVpnManager,
                OpenVpnTemplate = _storedSettings.OpenVpnTemplate
            };
            
            StateHasChanged();
        }
    }

    private async Task UpdateSettings()
    {
        _submitting = true;
        StateHasChanged();

        try
        {
            _storedSettings!.FreezeCtf = Settings!.FreezeCtf;
            
            _storedSettings!.ActivationCode = Settings!.ActivationCode;
            
            _storedSettings.EnableSpawningCooldown = Settings.EnableSpawningCooldown;
            _storedSettings.CooldownTimespan = Settings.CooldownTimespan;
            _storedSettings.CooldownLimit = Settings.CooldownLimit;
            
            _storedSettings.EnableVpnManager = Settings.EnableVpnManager;
            _storedSettings.OpenVpnTemplate = Settings.OpenVpnTemplate;

            if (Settings.EnableVpnManager)
                await VpnCertificateManager.EnsureServerCertificatesCreatedAsync();
            
            await SettingsManager.SaveSettingsAsync();

            var user = (AuthenticationState != null ? (await AuthenticationState).User.FindFirstValue(ClaimTypes.NameIdentifier) : null) ?? "???";
            Logger.LogInformation("Server settings updated - User: {UserId}.", user);
        }
        finally
        {
            _submitting = false;
            StateHasChanged();
        }
    }

    private void RegenerateCaCert()
    {
        _showConfirmation = true;
        _regenCa = true;
        StateHasChanged();
    }
    private void RegenerateServerCert()
    {
        _showConfirmation = true;
        _regenCa = false;
        StateHasChanged();
    }

    private async Task ConfirmationAction(bool confirmed)
    {
        _showConfirmation = false;
        
        if (!confirmed)
            return;
        
        _regenerating = true;
        StateHasChanged();
        
        var user = (AuthenticationState != null ? (await AuthenticationState).User.FindFirstValue(ClaimTypes.NameIdentifier) : null) ?? "???";

        if (_regenCa)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            foreach (var certificate in context.VpnCertificates.Where(t => t.Valid == true))
                certificate.Valid = false;

            await context.SaveChangesAsync();
            
            Logger.LogInformation("Admin requested CA certificate regeneration - User: {UserId}.", user);
            
            await VpnCertificateManager.GenerateNewRootCertificateAsync();
        }
        else
        {
            Logger.LogInformation("Admin requested server certificate regeneration - User: {UserId}.", user);
            await VpnCertificateManager.GenerateNewServerCertificateAsync();
        }
        _regenerating = false;
        StateHasChanged();
    }

}
