@page "/admin/challenges/{Id:int}/edit"
@rendermode InteractiveServer

@attribute [Authorize(Roles = CtfUser.AdminRole)]
@attribute [StreamRendering]

@inject IConfiguration Config
@inject IDbContextFactory<BlazorCtfPlatformContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Challenge</PageTitle>

<h2>Edit Challenge</h2>

@if (Challenge is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="card col-md-5">
            <div class="card-body">
                <EditForm method="post" Model="Challenge" OnValidSubmit="UpdateChallenge" FormName="edit" Enhance>
                    <ObjectGraphDataAnnotationsValidator/>
                    <ValidationSummary Model="Challenge" role="alert"/>
                    <input type="hidden" name="Challenge.Id" value="@Challenge.Id"/>
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText id="title" @bind-Value="Challenge.Title" class="form-control" disabled="@_submitting" />
                        <ValidationMessage For="() => Challenge.Title" class="text-danger" />
                    </div>
                    <div class="mb-1">
                        <label for="hidden" class="form-label">Hide Challenge</label>
                        <InputCheckbox id="hidden" @bind-Value="Challenge.Hidden" class="form-check-input ms-2" disabled="@_submitting" />
                    </div>
                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <InputText id="category" @bind-Value="Challenge.Category" class="form-control" disabled="@_submitting" />
                        <ValidationMessage For="() => Challenge.Category" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="Challenge.Description" rows="5" style="resize: none;" class="form-control" disabled="@_submitting" />
                        <ValidationMessage For="() => Challenge.Description" class="text-danger" />
                    </div>
                    @if (Challenge is InstanceChallenge instanceChallenge)
                    {
                        <div class="mb-3">
                            <label for="manifest" class="form-label">Deployment Manifest</label>
                            <InputText id="manifest" @bind-Value="instanceChallenge.DeploymentManifestPath" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => instanceChallenge.DeploymentManifestPath" class="text-danger" /> 
                        </div>
                        <div class="mb-3">
                            <label for="host" class="form-label">Host Format</label>
                            <InputText id="host" @bind-Value="instanceChallenge.HostFormat" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => instanceChallenge.HostFormat" class="text-danger" />
                        </div>
                        <div class="mb-1">
                            <label for="shared" class="form-label">Is Shared</label>
                            <InputCheckbox id="shared" @bind-Value="instanceChallenge.Shared" class="form-check-input ms-2" disabled="@_submitting" />
                        </div>
                        <div class="mb-3">
                            <label for="expiry" class="form-label">Expiry Time</label>
                            <InputNumber id="expiry" @bind-Value="instanceChallenge.ExpiryTime" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => instanceChallenge.ExpiryTime" class="text-danger" />
                        </div>
                    }
                    @if (Challenge.Flags.Count == 1)
                    {
                        <div class="mb-3">
                            <label for="flag" class="form-label">Flag</label>
                            <InputText id="flag" @bind-Value="Challenge.Flags[0].Flag" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => Challenge.Flags[0].Flag" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="points" class="form-label">Points</label>
                            <InputNumber id="points" @bind-Value="Challenge.Flags[0].Points" class="form-control" disabled="@_submitting" />
                            <ValidationMessage For="() => Challenge.Flags[0].Points" class="text-danger" />
                        </div>
                    }
                    else
                    {
                        var i = 0;
                        foreach (var flag in Challenge.Flags)
                        {
                            var flagNum = i++;
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="@($"flag-name-{flagNum}")" class="form-label">Flag Name</label>
                                        <InputText id="@($"flag-name-{flagNum}")" @bind-Value="flag.Name" class="form-control" disabled="@_submitting"/>
                                        <ValidationMessage For="() => flag.Name" class="text-danger"/>
                                    </div>
                                    <div class="mb-3">
                                        <label for="@($"flag-{flagNum}")" class="form-label">Flag</label>
                                        <InputText id="@($"flag-{flagNum}")" @bind-Value="flag.Flag" class="form-control" disabled="@_submitting"/>
                                        <ValidationMessage For="() => flag.Flag" class="text-danger"/>
                                    </div>
                                    <div class="mb-3">
                                        <label for="@($"points-{flagNum}")" class="form-label">Points</label>
                                        <InputNumber id="@($"points-{flagNum}")" @bind-Value="flag.Points" class="form-control" disabled="@_submitting"/>
                                        <ValidationMessage For="() => flag.Points" class="text-danger"/>
                                    </div>
                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-danger" @onclick="() => RemoveFlag(flag)" disabled="@_submitting">Remove Flag <span class="material-symbols-outlined" style="vertical-align: top">remove</span></button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    <div class="d-flex justify-content-start mb-3">
                        <button type="button" class="btn btn-primary" @onclick="AddFlag" disabled="@_submitting">Add Flag <span class="material-symbols-outlined" style="vertical-align: top">add</span></button>
                    </div>

                    @foreach (var pair in Challenge.Files.Select((file, i) => new { file, i }))
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                @if (!string.IsNullOrWhiteSpace(pair.file.StorageLocation))
                                {
                                    <div class="mb-3">
                                        <label for="@($"file-{pair.i}")" class="form-label">File Name</label>
                                        <InputText id="@($"file-{pair.i}")" @bind-Value="pair.file.Name" class="form-control" disabled="@_submitting" />
                                        <ValidationMessage For="() => pair.file.Name" class="text-danger" />
                                    </div>
                                }
                                else
                                {
                                    <div class="card mb-3">
                                        <div class="card-body d-flex align-items-center @(_newFiles.ContainsKey(pair.file) ? "justify-content-between" : "justify-content-center")"
                                             style="position: relative; min-height: 100px;"
                                             @ondragenter="() => _showDrop[pair.file] = true" 
                                             @ondragleave="() => _showDrop[pair.file] = false" 
                                             @ondragend="() => _showDrop[pair.file] = false">
                                            <InputFile OnChange="e => HandleFileDrop(e, pair.file)"
                                                       class="position-absolute w-100 h-100 overflow-hidden"
                                                       style="@("cursor: pointer; opacity: 0; top: 0; left: 0; z-index: 2;" + (_newFiles.ContainsKey(pair.file)? " pointer-events: none;" : ""))" />
                                            @if (_newFiles.TryGetValue(pair.file, out var file))
                                            {
                                                <span>@file.Name</span>
                                                <button type="button" class="btn btn-danger" @onclick="() => CancelFile(pair.file)" disabled="@_submitting">Remove</button>
                                            }
                                            else
                                            {
                                                @if (_showDrop.TryGetValue(pair.file, out var drop) && drop)
                                                {
                                                    <span>Drop file to queue for upload.</span>
                                                }
                                                else
                                                {
                                                    <div>
                                                        <span>Please drag or <u>select</u> a file for upload.</span><br />
                                                        @if (_fileErrors.TryGetValue(pair.file, out var error))
                                                        {
                                                            <span style="color: var(--bs-danger); font-size: 12px;">@error</span>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-danger" @onclick="() => RemoveFile(pair.file)" disabled="@_submitting">Remove File <span class="material-symbols-outlined" style="vertical-align: top">remove</span></button>
                                </div>
                            </div>
                        </div>
                        
                    }
                    <div class="d-flex justify-content-start mb-2">
                        <button type="button" class="btn btn-primary" @onclick="AddFile" disabled="@_submitting">Add File <span class="material-symbols-outlined" style="vertical-align: top">add</span></button>
                    </div>
                    
                    <div class="d-flex justify-content-end">
                        <a class="btn btn-secondary me-2" href="/admin/challenges" disabled="@_submitting">Cancel</a>
                        <button type="submit" class="btn btn-primary" disabled="@_submitting">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Challenge? Challenge { get; set; }

    private readonly List<CtfFlag> _deletedFlags = [];
    private readonly List<CtfFile> _deletedFiles = [];
    
    private readonly Dictionary<CtfFile, bool> _showDrop = new();
    private readonly Dictionary<CtfFile, IBrowserFile> _newFiles = new();
    private readonly Dictionary<CtfFile, string> _fileErrors = new();
    
    private bool _submitting;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            Challenge ??= await context.Challenges
                .Include(challenge => challenge.Flags)
                .Include(challenge => challenge.Files)
                .FirstOrDefaultAsync(m => m.Id == Id);

            if (Challenge is null)
                NavigationManager.NavigateTo("notfound");

            if (Challenge?.Flags.Count == 0)
                Challenge.Flags.Add(new CtfFlag());
            
            StateHasChanged();
        }
    }

    private async Task UpdateChallenge()
    {
        if (!ValidateFiles())
            return;

        _submitting = true;
        StateHasChanged();

        try
        {
            if (Challenge!.Flags.Count == 1)
                Challenge.Flags[0].Name = "Default Flag";
            await using var context = await DbFactory.CreateDbContextAsync();
            context.Attach(Challenge!).State = EntityState.Modified;

            foreach (var flag in Challenge.Flags.Where(f => f.Id != default))
                context.Attach(flag).State = EntityState.Modified;
            foreach (var file in Challenge.Files.Where(f => f.Id != default))
                context.Attach(file).State = EntityState.Modified;

            foreach (var flag in Challenge.Flags.Where(f => f.Id == default))
            {
                flag.Challenge = Challenge;
                context.Flags.Add(flag);
            }

            foreach (var file in Challenge.Files.Where(f => f.Id == default).ToList())
            {
                if (!_newFiles.TryGetValue(file, out var browserFile))
                {
                    _fileErrors[file] = "Please select a file to upload.";
                    return;
                }

                Guid fileName;
                do fileName = Guid.NewGuid();
                while (File.Exists(Config["UploadDirectory"] + Path.DirectorySeparatorChar + fileName));

                try
                {
                    file.Name = browserFile.Name;
                    file.StorageLocation = fileName.ToString();

                    await using var fileStream = File.Create(Config["UploadDirectory"] + Path.DirectorySeparatorChar + fileName);
                    await using var readStream = browserFile.OpenReadStream(browserFile.Size);
                    await readStream.CopyToAsync(fileStream);
                }
                catch
                {
                    if (File.Exists(Config["UploadDirectory"] + Path.DirectorySeparatorChar + fileName))
                        File.Delete(Config["UploadDirectory"] + Path.DirectorySeparatorChar + fileName);

                    _newFiles.Remove(file);
                    _fileErrors[file] = "An unknown error occurred while uploading this file.";
                    return;
                }
            }

            foreach (var flag in _deletedFlags)
                context.Attach(flag).State = EntityState.Deleted;

            foreach (var file in _deletedFiles)
            {
                if (File.Exists(Config["UploadDirectory"] + Path.DirectorySeparatorChar + file.StorageLocation))
                    File.Delete(Config["UploadDirectory"] + Path.DirectorySeparatorChar + file.StorageLocation);
                context.Attach(file).State = EntityState.Deleted;
            }

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ChallengeExists(Challenge!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }

            NavigationManager.NavigateTo("/admin/challenges");
        }
        finally
        {
            _submitting = false;
            StateHasChanged();
        }
    }

    private bool ChallengeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Challenges.Any(e => e.Id == id);
    }

    private void AddFlag()
    {
        if(Challenge?.Flags is [{ Name: "Default Flag" }])
            Challenge.Flags[0].Name = "";
        
        Challenge?.Flags?.Add(new CtfFlag());
        StateHasChanged();
    }

    private void RemoveFlag(CtfFlag challengeFlag)
    {
        if(challengeFlag.Id != default)
            _deletedFlags.Add(challengeFlag);
        
        Challenge?.Flags.Remove(challengeFlag);

        if(Challenge?.Flags is [{ Name: null or "" }])
            Challenge.Flags[0].Name = "Default Flag";
        
        StateHasChanged();
    }

    private void AddFile()
    {
        Challenge?.Files.Add(new CtfFile());
        StateHasChanged();
    }

    private bool ValidateFiles()
    {
        if (Challenge == null)
            return false;
        
        foreach (var file in Challenge.Files.Where(t => string.IsNullOrWhiteSpace(t.StorageLocation)))
            if (!_newFiles.ContainsKey(file))
                _fileErrors[file] = "Please select a file to upload.";
            else
                _fileErrors.Remove(file);
        
        return !_fileErrors.Any();
    }

    private void HandleFileDrop(InputFileChangeEventArgs eventArgs, CtfFile challengeFile)
    {
        _showDrop[challengeFile] = false;
        challengeFile.Name = eventArgs.File.Name;
        _newFiles[challengeFile] = eventArgs.File;
        StateHasChanged();
    }

    private void CancelFile(CtfFile challengeFile)
    {
        challengeFile.Name = "";
        _newFiles.Remove(challengeFile);
        StateHasChanged();
    }

    private void RemoveFile(CtfFile challengeFile)
    {
        if(challengeFile.Id != default)
            _deletedFiles.Add(challengeFile);
        
        Challenge?.Files.Remove(challengeFile);
        _newFiles.Remove(challengeFile);
        _fileErrors.Remove(challengeFile);
        _showDrop.Remove(challengeFile);
        StateHasChanged();
    }
}
