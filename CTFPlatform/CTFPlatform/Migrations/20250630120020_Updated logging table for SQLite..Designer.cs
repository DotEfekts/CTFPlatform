// <auto-generated />
using System;
using CTFPlatform.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTFPlatform.Migrations
{
    [DbContext(typeof(BlazorCtfPlatformContext))]
    [Migration("20250630120020_Updated logging table for SQLite.")]
    partial class UpdatedloggingtableforSQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("CTFPlatform.Models.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampSqlite")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("CTFPlatform.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("Challenge");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CTFPlatform.Models.ChallengeInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CtfUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeploymentPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InstanceExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoggingInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("CtfUserId");

                    b.ToTable("ChallengeInstances");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Flags");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CTFPlatform.Models.FlagSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlagId");

                    b.HasIndex("UserId");

                    b.ToTable("FlagSubmissions");
                });

            modelBuilder.Entity("CTFPlatform.Models.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("CTFPlatform.Models.UserInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("KillProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInstances");
                });

            modelBuilder.Entity("CTFPlatform.Models.VpnCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Valid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VpnCertificates");
                });

            modelBuilder.Entity("CTFPlatform.Models.InstanceChallenge", b =>
                {
                    b.HasBaseType("CTFPlatform.Models.Challenge");

                    b.Property<string>("DeploymentManifestPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpiryTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HostFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LoggingInfoFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shared")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("InstanceChallenge");
                });

            modelBuilder.Entity("CTFPlatform.Models.ChallengeInstance", b =>
                {
                    b.HasOne("CTFPlatform.Models.InstanceChallenge", "Challenge")
                        .WithMany("Instances")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFPlatform.Models.CtfUser", null)
                        .WithMany("Instances")
                        .HasForeignKey("CtfUserId");

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfFile", b =>
                {
                    b.HasOne("CTFPlatform.Models.Challenge", "Challenge")
                        .WithMany("Files")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfFlag", b =>
                {
                    b.HasOne("CTFPlatform.Models.Challenge", "Challenge")
                        .WithMany("Flags")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("CTFPlatform.Models.FlagSubmission", b =>
                {
                    b.HasOne("CTFPlatform.Models.CtfFlag", "Flag")
                        .WithMany("Submissions")
                        .HasForeignKey("FlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFPlatform.Models.CtfUser", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTFPlatform.Models.UserInstance", b =>
                {
                    b.HasOne("CTFPlatform.Models.ChallengeInstance", "Instance")
                        .WithMany("UserInstances")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CTFPlatform.Models.CtfUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTFPlatform.Models.VpnCertificate", b =>
                {
                    b.HasOne("CTFPlatform.Models.CtfUser", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CTFPlatform.Models.Challenge", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Flags");
                });

            modelBuilder.Entity("CTFPlatform.Models.ChallengeInstance", b =>
                {
                    b.Navigation("UserInstances");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfFlag", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("CTFPlatform.Models.CtfUser", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Instances");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("CTFPlatform.Models.InstanceChallenge", b =>
                {
                    b.Navigation("Instances");
                });
#pragma warning restore 612, 618
        }
    }
}
